# üìò Cartilha Python Intermedi√°rio
# Exemplos de fun√ß√µes e ferramentas para quem j√° conhece o b√°sico.

# -----------------------------
# 1. Fun√ß√µes com par√¢metros opcionais e retornos
# -----------------------------
def saudacao(nome, mensagem="Seja bem-vindo!"):
    """Fun√ß√£o com par√¢metro padr√£o"""
    return f"Ol√°, {nome}! {mensagem}"

print(saudacao("Alice"))
print(saudacao("Bob", "Como voc√™ est√° hoje?"))

# Fun√ß√£o que retorna m√∫ltiplos valores
def operacoes(a, b):
    """Retorna soma, subtra√ß√£o, multiplica√ß√£o e divis√£o"""
    soma = a + b
    sub = a - b
    mult = a * b
    div = a / b if b != 0 else None
    return soma, sub, mult, div

resultado = operacoes(10, 2)
print("Resultados das opera√ß√µes:", resultado)

# -----------------------------
# 2. Listas avan√ßadas e compreens√£o de listas
# -----------------------------
numeros = [1, 2, 3, 4, 5, 6]

# Filtrar n√∫meros pares usando list comprehension
pares = [n for n in numeros if n % 2 == 0]
print("N√∫meros pares:", pares)

# Quadrado dos n√∫meros
quadrados = [n**2 for n in numeros]
print("Quadrados:", quadrados)

# -----------------------------
# 3. Dicion√°rios e itera√ß√µes avan√ßadas
# -----------------------------
alunos = {
    "Alice": 8.5,
    "Bob": 7.2,
    "Carlos": 9.0
}

# Iterar sobre chaves e valores
for nome, nota in alunos.items():
    print(f"{nome} tem nota {nota}")

# Criar dicion√°rio invertido
notas = {nota: nome for nome, nota in alunos.items()}
print("Dicion√°rio invertido:", notas)

# -----------------------------
# 4. Manipula√ß√£o de arquivos avan√ßada
# -----------------------------
# Adicionar linhas a um arquivo sem apagar o conte√∫do
with open("exemplo.txt", "a") as arquivo:
    arquivo.write("\nAdicionando nova linha ao arquivo.")

# Ler arquivo linha a linha
with open("exemplo.txt", "r") as arquivo:
    for linha in arquivo:
        print("Linha do arquivo:", linha.strip())

# -----------------------------
# 5. Fun√ß√µes Lambda e Map/Filter/Reduce
# -----------------------------
from functools import reduce

# Fun√ß√£o lambda
quadrado = lambda x: x**2
print("Quadrado com lambda:", quadrado(5))

# Map
nums = [1, 2, 3, 4]
quadrados = list(map(lambda x: x**2, nums))
print("Map - Quadrados:", quadrados)

# Filter
pares = list(filter(lambda x: x % 2 == 0, nums))
print("Filter - Pares:", pares)

# Reduce
soma_total = reduce(lambda a, b: a + b, nums)
print("Reduce - Soma total:", soma_total)

# -----------------------------
# 6. Manipula√ß√£o de strings avan√ßada
# -----------------------------
texto = "Python √© divertido"
print("Upper:", texto.upper())
print("Lower:", texto.lower())
print("Split:", texto.split())
print("Replace:", texto.replace("divertido", "incr√≠vel"))

# -----------------------------
# 7. Tratamento de erros avan√ßado
# -----------------------------
try:
    n = int(input("Digite um n√∫mero para dividir 100: "))
    resultado = 100 / n
except ValueError:
    print("Erro: valor digitado n√£o √© um n√∫mero!")
except ZeroDivisionError:
    print("Erro: n√£o √© poss√≠vel dividir por zero!")
else:
    print("Resultado:", resultado)
finally:
    print("Execu√ß√£o do bloco try/except finalizada.")

# -----------------------------
# 8. Importa√ß√£o de m√≥dulos e fun√ß√µes externas
# -----------------------------
import random

numeros_aleatorios = [random.randint(1, 100) for _ in range(5)]
print("N√∫meros aleat√≥rios:", numeros_aleatorios)

import datetime

agora = datetime.datetime.now()
print("Data e hora atual:", agora)

# -----------------------------
# 9. Classes e Orienta√ß√£o a Objetos b√°sica
# -----------------------------
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    
    def apresentar(self):
        return f"Ol√°, meu nome √© {self.nome} e tenho {self.idade} anos."

p1 = Pessoa("Alice", 25)
print(p1.apresentar())

# -----------------------------
# 10. Fun√ß√µes Recursivas
# -----------------------------
def fatorial(n):
    """Calcula o fatorial de forma recursiva"""
    if n == 0 or n == 1:
        return 1
    else:
        return n * fatorial(n - 1)

print("Fatorial de 5:", fatorial(5))

print("Fim da cartilha Python Intermedi√°rio! üéâ")
